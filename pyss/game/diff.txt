1d0
< from copy import deepcopy
4,5c3
< from functools import lru_cache
< 
---
> from pyss.game.board.base import BaseBoard
7c5
< from .piece import piece_dict, Piece
---
> from ..piece import piece_dict
13,14c11,13
< class Chessboard:
<     """Represents a chessboard
---
> class PlayableBoard(BaseBoard):
>     def __init__(self, initialize=True):
>         super().__init__(initialize=initialize)
16,19c15
<         - 8x8 grid of alternating black and white squares
<         - 16 pieces per player
<         - 2 players
<     """
---
>         self.active_color = "white"
21,23d16
<     def __init__(self, initialize=True):
<         self.en_passant_available = False
<         self.board = None
26,28c19
<         self._active_pieces = None
<         self._by_color = None
< 
---
>         self.en_passant_available = False
32,87d22
<         if initialize:
<             self.reset()
< 
<     @staticmethod
<     def initialize(no_pawns=False,
<                    no_left_pawns=False,
<                    no_right_pawns=False,
<                    no_knights=False,
<                    no_rooks=False,
<                    no_bishops=False,
<                    no_queens=False,
<                    no_second_special=False,
<                    interlace_pawns=False,
<                    no_initial_pieces=False,
<                    ):
<         """Initializes the board with the starting positions of the pieces."""
<         board = [[None for _ in range(8)] for _ in range(8)]
< 
<         if not no_initial_pieces:
<             already_placed = {'white': [], 'black': []}
< 
<             for ty in piece_dict:
<                 if no_pawns and ty == "pawn":
<                     continue
<                 for color in piece_dict[ty]["initial_positions"]:
<                     for position in piece_dict[ty]["initial_positions"][color]:
<                         if no_left_pawns and ty == "pawn":
<                             if position[1] < 4:
<                                 continue
<                         if no_right_pawns and ty == "pawn":
<                             if position[1] > 3:
<                                 continue
< 
<                         if no_knights and ty == "knight":
<                             continue
<                         if no_rooks and ty == "rook":
<                             continue
<                         if no_bishops and ty == "bishop":
<                             continue
<                         if no_queens and ty == "queen":
<                             continue
< 
<                         if no_second_special and ty != "pawn":
<                             if ty in already_placed[color]:
<                                 continue
<                             else:
<                                 already_placed[color].append(ty)
< 
<                         if interlace_pawns and ty == "pawn":
<                             if position[1] % 2 == 0:
<                                 continue
< 
<                         board[position[0]][position[1]] = Piece(color, ty)
< 
<         return board
< 
89c24,25
<         """Resets the board to its initial state"""
---
>         super().reset(**kwargs)
> 
91d26
<         self.en_passant_available = False
92a28
>         self.en_passant_available = False
95,137d30
<         
<         self.board = Chessboard.initialize(**kwargs)
<         self.__init_active_pieces()
< 
<     def __init_active_pieces(self):
<         """Updates the active pieces on the board"""
< 
<         pieces = {}
<         by_color = {'white': [], 'black': []}
<         for i, row in enumerate(self.board):
<             for j, piece in enumerate(row):
<                 if piece:
<                     pieces[piece] = (i, j)
<                     by_color[piece.color].append(piece)
< 
<         self._by_color = by_color
<         self._active_pieces = pieces
< 
<     def valid_moves_to_depth(self, position, depth=3, all_valid_moves=None):
<         """Returns a list of valid moves for a piece to a given depth. (max=3) """
<         if all_valid_moves is None:
<             all_valid_moves = []
< 
<         original_piece = self[position]
<         if not original_piece or depth < 0:
<             return all_valid_moves
< 
<         # check valid moves for piece
<         valid_moves = self.valid_moves(position)
<         all_valid_moves.append((depth, valid_moves))
<         for move in valid_moves:
<             # simulate move - we don't use getters/setters here because we don't want to update the board
<             move_piece = self[move]
<             self.board[move[0]][move[1]] = original_piece
< 
<             # check valid moves for piece
<             self.board[position[0]][position[1]] = None
<             self.valid_moves_to_depth(
<                 move, depth=depth - 1, all_valid_moves=all_valid_moves)
< 
<             # undo move
<             self.board[move[0]][move[1]] = move_piece
<             self.board[position[0]][position[1]] = original_piece
139,142c32,33
<         return all_valid_moves
< 
<     def valid_moves(self, position=None):
<         """Returns a list of valid moves for a piece at position. """
---
>     def get_valid_moves(self, position=None):
>         """Returns a list of valid moves for a piece. """
150,151c41
<             # check for en passant, self.en_passant_available[0] is the position of the pawn that can be captured
<             # self.en_passant_available[1] is the position of the new move location
---
>             # check for en passant, self.en_passant_available is the position of the pawn that can be captured
153,154c43,44
<                 if abs(self.en_passant_available[0][0] - position[0]) == 1:
<                     valid_moves.append(self.en_passant_available[1])
---
>                 if self.en_passant_available[1] == position[1] and abs(self.en_passant_available[0] - position[0]) == 1:
>                     valid_moves.append(self.en_passant_available)
159c49,50
<                 other_positions = piece_dict["rook" if piece.type == "king" else "king"]["initial_positions"][piece.color]
---
>                 other_positions = piece_dict["rook" if piece.type ==
>                                              "king" else "king"]["initial_positions"][piece.color]
201,257d91
<     def board_safe(self, position, new_position):
<         """Checks if a move is valid between two locations on the board."""
<         # check if new position is in bounds
<         if new_position[0] < 0 or new_position[0] > 7 or new_position[1] < 0 or new_position[1] > 7:
<             return False
< 
<         # check if move is to the same position
<         if new_position == position:
<             return False
< 
<         # check if move is to an occupied square by same team
<         dest_piece = self[new_position]
<         moving_piece = self[position]
<         if dest_piece and moving_piece and dest_piece.color == moving_piece.color:
<             return False
< 
<         return True
< 
<     def check_path(self, position, new_position, castling=False):
<         """ Returns true if there are no pieces in a straight line between two positions. """
<         # get the direction of the move
<         direction = (
<             new_position[0] -
<             position[0],
<             new_position[1] -
<             position[1])
< 
<         # get the number of spaces between the two positions
<         distance = max(abs(direction[0]), abs(direction[1]))
<         # TODO: Hack so that castling doesn't ignore rooks/kings
< 
<         # check if the path is clear
<         seen_enemy = False
<         for i in range(distance):
<             # get the position of the next space in the path
<             next_position = (position[0] +
<                              (i + 1) * direction[0] // distance,
<                              position[1] +
<                              (i + 1) * direction[1] // distance)
< 
<             # check if the space is occupied by a friendly piece
<             next_piece = self[next_position]
<             moving_piece = self[position]
<             if next_piece and moving_piece and next_piece.compare_color(moving_piece) and\
<                     next_piece.type not in ["king", "rook"] and not castling:
<                 return False
<             # if it's an enemy piece, check if we've already seen one or set
<             # that we have
<             elif next_piece:
<                 if seen_enemy:
<                     return False
<                 seen_enemy = True
<             elif seen_enemy:
<                 return False
< 
<         return True
<     
265c99
<             for move in self.valid_moves(position):
---
>             for move in self.get_valid_moves(position):
271c105
<     
---
> 
275c109
<     
---
> 
293c127
<             other.type != piece.type and other.color == piece.color:
---
>                 other.type != piece.type and other.color == piece.color:
298,300c132
<             # the rooks can be on either side of the king and 2 or 3 spaces away
<             # the right rook will end up on the other side of the king
<             # the king will move +2 or -2 spaces
---
>             # TODO: should castle be stored in the pieces?
338c170
<                     self.en_passant_available = new_position, (position[0], position[1] + 1 if piece.color == "white" else position[1] - 1)
---
>                     self.en_passant_available = new_position
340,341c172
<                     # check if pawn is capturing en passant, en_passant_available[0] is the position of the pawn that can be captured
<                     # en_passant_available[1] is the new position for the pawn that captures
---
>                     # check if pawn is capturing en passant, en_passant_available is the position of the pawn that can be captured
343,346c174,178
<                             new_position[1] - position[1])
<                     logger.debug("Vector: ", vector, "Valid Captures: ", piece.valid_captures, "En Passant Available: ", self.en_passant_available)
<                     if self.en_passant_available and new_position == self.en_passant_available[1] and vector in piece.valid_captures:
<                         del self[self.en_passant_available[0]]
---
>                               new_position[1] - position[1])
>                     logger.debug("Vector: ", vector, "Valid Captures: ", piece.valid_captures,
>                                  "En Passant Available: ", self.en_passant_available)
>                     if self.en_passant_available and new_position == self.en_passant_available and vector not in piece.valid_captures:
>                         del self[self.en_passant_available]
349,350c181,183
<                         
<                     self.en_passant_available = False    
---
>                         new_position = (new_position[0], self.en_passant_available[1] + 1 if piece.color ==
>                                         "white" else self.en_passant_available[1] - 1)
>                     self.en_passant_available = False
359c192
<             capture = True    
---
>             capture = True
374c207
<             piece.type, piece.notation, position, new_position, capture=capture, 
---
>             piece.type, piece.notation, position, new_position, capture=capture,
377,406d209
<         
<     # define index access to board
<     def __getitem__(self, key):
<         """Returns the piece at a position on the board"""
<         try:
<             piece = self.board[key[0]][key[1]]
<             return piece
<         except IndexError:
<             pass
< 
<     def __delitem__(self, key):
<         """Removes a piece from the board"""
<         # find piece in active pieces
<         for real_position, piece in self._active_pieces.items():
<             if piece == key:
<                 del self._active_pieces[real_position]
<                 self._by_color[self[piece].color].remove(real_position)
<                 break
< 
<         self.board[key[0]][key[1]] = None
< 
<     def __setitem__(self, key, value):
<         """Adds a piece to the board"""
<         # if already a piece there, remove it
<         if self[key]:
<             del self[key]
< 
<         self.board[key[0]][key[1]] = value
<         self._active_pieces[value] = key
<         self._by_color[value.color].append(value)
